from config import BOT_TOKEN
import logging
from aiogram import types, Dispatcher, Bot, executor
import keyboards as kb

TOKEN = os.getenv('TOKEN', '')  # Press "Reveal Config Vars" in settings tab on Heroku and set TOKEN variable

WEBHOOK_HOST = f'https://orientation-bot.herokuapp.com/'  # Enter here your link from Heroku project settings
WEBHOOK_URL_PATH = '/webhook/' + TOKEN
WEBHOOK_URL = urljoin(WEBHOOK_HOST, WEBHOOK_URL_PATH)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
Message = types.message

a = 0
n = 0
b = 0


@dp.message_handler(commands=['start'])
async def hello_command(message: Message):
    with open(f'static/start.jpg', 'rb') as photo:
        await bot.send_photo(message.from_user.id, photo,
                             caption='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –û—Ä–∏–µ–Ω—Ç–∏—Ä –ì–∏–º–Ω–∞–∑–∏–∏. '
                                     '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –í—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é. '
                                     '–°–ª–µ–¥—É–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å /menu',
                             reply_markup=kb.help_text)
        await bot.edit_message_text(message.from_user.id, message_id=message.id)  # 1


@dp.message_handler(commands=['help'])
async def hello_command2(message: Message):
    pass


@dp.message_handler(commands=['menu'])
async def help_command(message: Message):
    await message.reply('–í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é.',
                        reply_markup=kb.orientation1)


@dp.callback_query_handler(text='orientation')
async def answer_message_btn2(call: types.CallbackQuery):
    await call.message.edit_reply_markup()
    await bot.send_message(call.message.chat.id,
                           'üéìüí•–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞,'
                           ' —Ç–æ–≥–¥–∞ –º—ã –ø–æ–∫–∞–∂–µ–º –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüí•üéì')
    await bot.send_message(call.message.chat.id,
                           '–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å', reply_markup=kb.how_class)
    await bot.send_message(call.message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞.',
                           reply_markup=kb.how_letter)


@dp.callback_query_handler(text='fast')
async def fast(message: Message):
    # await bot.edit_message_reply_markup(inline_message_id=)
    with open(f'static/fast.jpg', 'rb') as photo:
        await bot.send_photo(message.from_user.id, photo,
                             caption='üç¥ –°—Ç–æ–ª–æÃÅ–≤–∞—è ‚Äî —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è '
                                     '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, ¬´–æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ'
                                     ' –∏–ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞—é—â–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π'
                                     ' –∫–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç '
                                     '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –ø–∏—Ç–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥—è—â–µ–µ'
                                     ' –∏ —Ä–µ–∞–ª–∏–∑—É—é—â–µ–µ '
                                     '–∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é¬ª[1] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è'
                                     ' –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ'
                                     ' –ø–∏—Ç–∞–Ω–∏—è (–æ–±–µ–¥–∞) –∏–∑ —Ç—Ä—ë—Ö –±–ª—é–¥. üç¥',
                             reply_markup=kb.fast_orientation)


@dp.callback_query_handler()
async def class_orientation(call: True):
    global a, b
    c = call.data
    if c == 'a' or c == 'b':
        b = call.data
    elif c == 'breakfast' or c == 'lunch' or c == 'afternoon_tea' or c == 'dinner' or c == 'sonnik':
        print(c)
        with open(f'static/{c}.png', 'rb') as photo:
            await bot.send_photo(call.message.chat.id, photo,
                                 caption=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {c}')
    else:
        a = call.data
    for i in range(1, 12):
        if f'{a}{b}' == f'{i}a' or f'{a}{b}' == f'{i}b':
            with open(f'static/{i}{b}.png', 'rb') as photo:
                await bot.send_photo(call.message.chat.id, photo,
                                     caption=f'‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç '
                                             f'–≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {i}'
                                             f' "{b}" –∫–ª–∞—Å—Å')
                a = 0
                b = 0


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
